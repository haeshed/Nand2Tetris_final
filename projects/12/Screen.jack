// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 512) { // 512 words in screen
            let screen[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int screenWord, pixelIndex;
        let screenWord = screen[(y * 32) + (x / 16)];
        let pixelIndex = x - (16 * (x / 16)); // x % 16
        if (color = true) {
            let screenWord[pixelIndex] = 1;
        }
        else {
            let screenWord[pixelIndex] = 0;
        }
        return;
    }

    function void drawHorizontalLine(int x, int y, int length) {
        var int screenWord, pixelsInFirstWord, i;
        let pixelsInFirstWord = 16 - (x - (16 * (x / 16))); // 16 - (x % 16)
        
        // Take care of the case where x is not aligned to 16 bit
        if (~(pixelsInFirstWord = 16)) {
            let i = 0;
            while (i < pixelsInFirstWord)
            {
                do Screen.drawPixel(x + i, y);
                let length = length - 1;
                let i = i + 1;
            }
        }

        // We are now aligned to 16 bit and we can start drawing entire words efficiently
        let x = x + pixelsInFirstWord;
        while (~(length < 16)) {
            if (color  = true) {
                let screen[(y * 32) + (x / 16)] = 65535;
            } else {
                let screen[(y * 32) + (x / 16)] = 0;
            }
            let length = length - 16;
            let x = x + 16;
        }

        // Color the remaining pixels
        while (length > 0) {
            do Screen.drawPixel(x, y);
            let length = length - 1;
            let x = x + 1;
        }
        return;
    }

    function void drawVerticalLine(int y, int x1, int x2) {
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var a, b, diff, dx, dy, leftX, lowerY;
        let a = 0;
        let b = 0;
        let diff = 0;

        if (x2 > x1) {
            let dx = x2 - x1;
            let leftX = x1;
        }
        else {
            let dx = x1 - x2;
            let leftX = x2;
        }

        if (y2 > y1) {
            let dx = y2 - y1;
            let lowerY = y1;
        }
        else {
            let dx = y1 - y2;
            let lowerY = y2;
        }

        if (dx = 0) {
            do Screen.drawVerticalLine();
        }
        else {
            if (dy = 0) {
                do Screen.drawHorizontalLine();
            }
        }

        do Screen.drawPixel(x1 + a, y1 + b);

    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
