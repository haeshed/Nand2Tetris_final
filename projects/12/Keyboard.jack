// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    static Array keyboard;

    /** Initializes the keyboard. */
    function void init() {
        let keyboard = 24576; // Keyboard address
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        var int keyCode;

        let keyCode = keyboard[0];
        return keyCode;
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c, keyPressed;
        let keyPressed = Keyboard.keyPressed();
        while (keyPressed = 0) {
            let keyPressed = Keyboard.keyPressed();
        }
        let c = keyPressed;
        while (~(keyPressed = 0)) {
            let keyPressed = Keyboard.keyPressed();
        }
        do Output.printChar(c);
        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String line;
        var Array storage, tmpStorage;
        var int currentCapacity, cursorIndex, copyIndex;
        var char c;

        do Output.printString(message);
        do Output.println();

        let currentCapacity = 8;
        let storage = Array.new(currentCapacity);
        let cursorIndex = 0;
        let c = Keyboard.readChar();
        while (~(c = 128)) {

            // Handle overflow by creating a new array of double capacity and copying the contents of the previous array to it
            if (cursorIndex = currentCapacity) {
                let tmpStorage = storage;
                let storage = Array.new(currentCapacity * 2);
                let copyIndex = 0;
                while (copyIndex < currentCapacity) {
                    let storage[copyIndex] = tmpStorage[copyIndex];
                    let copyIndex = copyIndex + 1;
                }
                let currentCapacity = currentCapacity * 2;
                do tmpStorage.dispose();
            }

            // Handle special characters
            if (c = String.backSpace()) {
                if (cursorIndex > 0) {
                    let cursorIndex = cursorIndex - 1;
                }
            } else {

                // Write read character into array
                let storage[cursorIndex] = c;
                let cursorIndex = cursorIndex + 1;
            }

            // Read the next character
            let c = Keyboard.readChar();
        }
        
        // Create string object from char array and dispose array
        let line = String.new(cursorIndex);
        let copyIndex = 0;
        while (copyIndex < cursorIndex) {
            do line.appendChar(storage[copyIndex]);
            let copyIndex = copyIndex + 1;
        }
        do storage.dispose();
        return line;
    }   

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String s;
        let s = Keyboard.readLine(message);
        return s.intValue();
    }
}
