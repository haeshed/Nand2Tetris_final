// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    PARTS:

    // Load A register
    Not(in=instruction[15], out=isAOpcode);
    And(a=instruction[5], b=instruction[15], out=isCOpcodeAndShouldLoadA);
    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=AValue);
    Or(a=isAOpcode, b=isCOpcodeAndShouldLoadA, out=shouldLoadA);
    ARegister(in=AValue, load=shouldLoadA, out=A, out[0..14]=addressM);
    
    // Load D register
    And(a=instruction[4], b=instruction[15], out=shouldLoadD);
    DRegister(in=ALUOut, load=shouldLoadD, out=D);
    
    // Feed x and y value to ALU
    Mux16(a=A, b=inM, sel=instruction[12], out=y);
    ALU(x=D, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=zr, ng=ng);
    
    // Should writeM?
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    // Handle PC
    // Derive all possible flags from zr and ng:
    // NO JUMP - 0
    Or(a=zr, b=ng, out=le);
    Not(in=le, out=gt);
    // EQ - zr
    Or(a=zr, b=gt, out=ge);
    // LT - ng
    Not(in=zr, out=ne);
    // JMP - 1
    
    // Mux8Way
    // if sel == 000: no jump
    // if sel == 001: gt
    // ...
    // if sel == 111: jump
    Mux(a=false, b=ng, sel=instruction[2], out=nJMPOrJLT);
    Mux(a=gt, b=ne, sel=instruction[2], out=JGTOrJNE);
    Mux(a=zr, b=le, sel=instruction[2], out=JEQOrJLE);
    Mux(a=ge, b=true, sel=instruction[2], out=JGEOrJMP);
    
    Mux(a=nJMPOrJLT, b=JEQOrJLE, sel=instruction[1], out=nJMPOrJLTorJEQOrJLE);
    Mux(a=JGTOrJNE, b=JGEOrJMP, sel=instruction[1], out=JGTOrJNEOrJGEOrJMP);

    Mux(a=nJMPOrJLTorJEQOrJLE, b=JGTOrJNEOrJGEOrJMP, sel=instruction[0], out=shouldJMPConditional);
    
    // Jump only if this is a C-opcode
    And(a=shouldJMPConditional, b=instruction[15], out=shouldJMP);
    
    PC(in=A, load=shouldJMP, inc=true, reset=reset, out[0..14]=pc);
}